package com.lea.dal.domain.entities;
// Generated 28.06.2018. 08:51:52 by Hibernate Tools 4.3.1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * Patient generated by hbm2java
 */
@Entity
@Table(name = "Patient",
         schema = "dbo",
         catalog = "VirgoHospitals",
         uniqueConstraints = {
            @UniqueConstraint(columnNames = "LifestyleDetailsID")
            , @UniqueConstraint(columnNames = "BasicDetailsID")
            , @UniqueConstraint(columnNames = "PersonalDetailsID")
            , @UniqueConstraint(columnNames = "ComplaintDetailsID")
            , @UniqueConstraint(columnNames = "MedicalDetailsID")
            , @UniqueConstraint(columnNames = "OPID")}
)
public class Patient extends EntityBase implements java.io.Serializable {

    private int idpatient;
    private BasicDetails basicDetailsByNextOfKinId;
    private BasicDetails basicDetailsByBasicDetailsId;
    private ComplaintDetails complaintDetails;
    private LifestyleDetails lifestyleDetails;
    private MedicalDetails medicalDetails;
    private PersonalDetails personalDetails;
    private String opid;
    private Date fullRegistrationDate;
    private String nextOfKinRelationship;
    private Set<Appointment> appointments = new HashSet<Appointment>(0);
    private Set<EmergencyRegistration> emergencyRegistrations = new HashSet<EmergencyRegistration>(0);

    public Patient() {
    }

    public Patient(int idpatient, BasicDetails basicDetailsByNextOfKinId, BasicDetails basicDetailsByBasicDetailsId, String nextOfKinRelationship) {
        this.idpatient = idpatient;
        this.basicDetailsByNextOfKinId = basicDetailsByNextOfKinId;
        this.basicDetailsByBasicDetailsId = basicDetailsByBasicDetailsId;
        this.nextOfKinRelationship = nextOfKinRelationship;
    }

    public Patient(int idpatient, BasicDetails basicDetailsByNextOfKinId, BasicDetails basicDetailsByBasicDetailsId, ComplaintDetails complaintDetails, LifestyleDetails lifestyleDetails, MedicalDetails medicalDetails, PersonalDetails personalDetails, String opid, Date fullRegistrationDate, String nextOfKinRelationship, Set<Appointment> appointments, Set<EmergencyRegistration> emergencyRegistrations) {
        this.idpatient = idpatient;
        this.basicDetailsByNextOfKinId = basicDetailsByNextOfKinId;
        this.basicDetailsByBasicDetailsId = basicDetailsByBasicDetailsId;
        this.complaintDetails = complaintDetails;
        this.lifestyleDetails = lifestyleDetails;
        this.medicalDetails = medicalDetails;
        this.personalDetails = personalDetails;
        this.opid = opid;
        this.fullRegistrationDate = fullRegistrationDate;
        this.nextOfKinRelationship = nextOfKinRelationship;
        this.appointments = appointments;
        this.emergencyRegistrations = emergencyRegistrations;
    }

    @Id @GeneratedValue(strategy = GenerationType.AUTO)
    @Column(name = "IDPatient", unique = true, nullable = false)
    public int getIdpatient() {
        return this.idpatient;
    }

    public void setIdpatient(int idpatient) {
        this.idpatient = idpatient;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "NextOfKinID", nullable = false)
    public BasicDetails getBasicDetailsByNextOfKinId() {
        return this.basicDetailsByNextOfKinId;
    }

    public void setBasicDetailsByNextOfKinId(BasicDetails basicDetailsByNextOfKinId) {
        this.basicDetailsByNextOfKinId = basicDetailsByNextOfKinId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "BasicDetailsID", unique = true, nullable = false)
    public BasicDetails getBasicDetailsByBasicDetailsId() {
        return this.basicDetailsByBasicDetailsId;
    }

    public void setBasicDetailsByBasicDetailsId(BasicDetails basicDetailsByBasicDetailsId) {
        this.basicDetailsByBasicDetailsId = basicDetailsByBasicDetailsId;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "ComplaintDetailsID", unique = true)
    public ComplaintDetails getComplaintDetails() {
        return this.complaintDetails;
    }

    public void setComplaintDetails(ComplaintDetails complaintDetails) {
        this.complaintDetails = complaintDetails;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "LifestyleDetailsID", unique = true)
    public LifestyleDetails getLifestyleDetails() {
        return this.lifestyleDetails;
    }

    public void setLifestyleDetails(LifestyleDetails lifestyleDetails) {
        this.lifestyleDetails = lifestyleDetails;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "MedicalDetailsID", unique = true)
    public MedicalDetails getMedicalDetails() {
        return this.medicalDetails;
    }

    public void setMedicalDetails(MedicalDetails medicalDetails) {
        this.medicalDetails = medicalDetails;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PersonalDetailsID", unique = true)
    public PersonalDetails getPersonalDetails() {
        return this.personalDetails;
    }

    public void setPersonalDetails(PersonalDetails personalDetails) {
        this.personalDetails = personalDetails;
    }

    @Column(name = "OPID", unique = true)
    public String getOpid() {
        return this.opid;
    }

    public void setOpid(String opid) {
        this.opid = opid;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "FullRegistrationDate", length = 10)
    public Date getFullRegistrationDate() {
        return this.fullRegistrationDate;
    }

    public void setFullRegistrationDate(Date fullRegistrationDate) {
        this.fullRegistrationDate = fullRegistrationDate;
    }

    @Column(name = "NextOfKinRelationship", nullable = false)
    public String getNextOfKinRelationship() {
        return this.nextOfKinRelationship;
    }

    public void setNextOfKinRelationship(String nextOfKinRelationship) {
        this.nextOfKinRelationship = nextOfKinRelationship;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
    public Set<Appointment> getAppointments() {
        return this.appointments;
    }

    public void setAppointments(Set<Appointment> appointments) {
        this.appointments = appointments;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "patient")
    public Set<EmergencyRegistration> getEmergencyRegistrations() {
        return this.emergencyRegistrations;
    }

    public void setEmergencyRegistrations(Set<EmergencyRegistration> emergencyRegistrations) {
        this.emergencyRegistrations = emergencyRegistrations;
    }

}
